#include "coord.hpp"
#include "intcode.hpp"

#include <catch2/catch.hpp>

#include <array>
#include <iostream>

TEST_CASE("day19") {
  constexpr auto input = std::array{
      109,   424,   203,   1,     21102, 11,    1,     0,     1106,  0,
      282,   21102, 18,    1,     0,     1106,  0,     259,   2102,  1,
      1,     221,   203,   1,     21102, 1,     31,    0,     1106,  0,
      282,   21101, 0,     38,    0,     1106,  0,     259,   21001, 23,
      0,     2,     22101, 0,     1,     3,     21101, 1,     0,     1,
      21102, 57,    1,     0,     1106,  0,     303,   2101,  0,     1,
      222,   21002, 221,   1,     3,     20102, 1,     221,   2,     21101,
      259,   0,     1,     21101, 0,     80,    0,     1105,  1,     225,
      21102, 1,     83,    2,     21101, 0,     91,    0,     1105,  1,
      303,   1202,  1,     1,     223,   20102, 1,     222,   4,     21101,
      259,   0,     3,     21101, 225,   0,     2,     21102, 1,     225,
      1,     21101, 118,   0,     0,     1106,  0,     225,   21002, 222,
      1,     3,     21101, 179,   0,     2,     21102, 1,     133,   0,
      1105,  1,     303,   21202, 1,     -1,    1,     22001, 223,   1,
      1,     21101, 0,     148,   0,     1105,  1,     259,   1202,  1,
      1,     223,   21001, 221,   0,     4,     20101, 0,     222,   3,
      21102, 1,     19,    2,     1001,  132,   -2,    224,   1002,  224,
      2,     224,   1001,  224,   3,     224,   1002,  132,   -1,    132,
      1,     224,   132,   224,   21001, 224,   1,     1,     21102, 1,
      195,   0,     105,   1,     109,   20207, 1,     223,   2,     21002,
      23,    1,     1,     21102, -1,    1,     3,     21102, 214,   1,
      0,     1106,  0,     303,   22101, 1,     1,     1,     204,   1,
      99,    0,     0,     0,     0,     109,   5,     2101,  0,     -4,
      249,   21201, -3,    0,     1,     21202, -2,    1,     2,     22101,
      0,     -1,    3,     21101, 0,     250,   0,     1106,  0,     225,
      22101, 0,     1,     -4,    109,   -5,    2106,  0,     0,     109,
      3,     22107, 0,     -2,    -1,    21202, -1,    2,     -1,    21201,
      -1,    -1,    -1,    22202, -1,    -2,    -2,    109,   -3,    2106,
      0,     0,     109,   3,     21207, -2,    0,     -1,    1206,  -1,
      294,   104,   0,     99,    21202, -2,    1,     -2,    109,   -3,
      2105,  1,     0,     109,   5,     22207, -3,    -4,    -1,    1206,
      -1,    346,   22201, -4,    -3,    -4,    21202, -3,    -1,    -1,
      22201, -4,    -1,    2,     21202, 2,     -1,    -1,    22201, -4,
      -1,    1,     21201, -2,    0,     3,     21101, 343,   0,     0,
      1105,  1,     303,   1106,  0,     415,   22207, -2,    -3,    -1,
      1206,  -1,    387,   22201, -3,    -2,    -3,    21202, -2,    -1,
      -1,    22201, -3,    -1,    3,     21202, 3,     -1,    -1,    22201,
      -3,    -1,    2,     21201, -4,    0,     1,     21101, 384,   0,
      0,     1106,  0,     303,   1105,  1,     415,   21202, -4,    -1,
      -4,    22201, -4,    -3,    -4,    22202, -3,    -2,    -2,    22202,
      -2,    -4,    -4,    22202, -3,    -2,    -3,    21202, -4,    -1,
      -2,    22201, -3,    -2,    1,     21202, 1,     1,     -4,    109,
      -5,    2105,  1,     0};

  const auto compute = [&](auto c) {
    return reuk::Interpreter{input}.runUntilOutput(std::array{c.x, c.y});
  };

  const auto affected = [&] {
    size_t ret{};

    for (auto x = 0; x != 50; ++x) {
      for (auto y = 0; y != 50; ++y) {
        if (const auto result = compute(reuk::Coord{x, y}))
          ret += *result;
      }
    }

    return ret;
  }();

  REQUIRE(affected == 131);

  const auto closest = [&] {
    for (reuk::Coord current{99, 0};; current.x += 1) {
      while (compute(current) != 1)
        current.y += 1;

      if (compute(current + reuk::Coord{-99, 99}) == 1)
        return current + reuk::Coord{-99, 0};
    }
  }();

  REQUIRE(closest == reuk::Coord{1523, 1022});
}
