#include "coord.hpp"
#include "direction2d.hpp"

#include <catch2/catch.hpp>

#include <array>
#include <iostream>
#include <optional>
#include <set>
#include <string>

namespace {

class Map final {
  auto toInd(reuk::Coord c) const noexcept -> std::optional<size_t> {
    const auto result = c.x + width * c.y;

    if (c.x < 0 || width <= c.x || c.y < 0 || storage.size() <= result)
      return {};

    return result;
  }

  auto toCoord(int64_t ind) const noexcept {
    return reuk::Coord{ind % width, ind / width};
  }

public:
  explicit Map(std::string_view m)
      : storage(m), width(storage.find('\n') + 1) {}

  auto set(reuk::Coord c, char t) noexcept {
    if (const auto ind = toInd(c))
      storage[*ind] = t;
  }

  auto get(reuk::Coord c) const noexcept -> std::optional<char> {
    if (const auto ind = toInd(c))
      return storage[*ind];
    return {};
  }

  auto get(char c) const noexcept { return toCoord(storage.find(c)); }

  auto unlock(char c) {
    for (const auto t : std::array{c, char(std::toupper(c))})
      std::replace(storage.begin(), storage.end(), t, '.');
  }

  auto remainingKeys() const noexcept {
    std::set<char> result;

    for (const auto &c : storage)
      if ('a' <= c && c <= 'z')
        result.insert(c);

    return result;
  }

private:
  std::string storage;
  int64_t width{};
};

auto stepsToKey(const Map &map, reuk::Coord pos, char key,
                std::set<reuk::Coord> visited = {}) -> std::optional<size_t> {
  if (visited.find(pos) != visited.cend())
    return {};

  const auto tile = map.get(pos);

  if (tile && *tile == key)
    return 0;

  if (!(tile == '.' || tile == '@'))
    return {};

  visited.insert(pos);

  std::optional<size_t> result;

  for (const auto d : reuk::directions2d) {
    if (const auto out = stepsToKey(map, pos + toCoord(d), key, visited)) {
      result = [&] {
        const auto steps = 1 + *out;
        if (result)
          return std::min(*result, steps);
        return steps;
      }();
    }
  }

  return result;
}

auto part1(Map map, reuk::Coord pos, size_t stepsSoFar)
    -> std::optional<size_t> {
  if (const auto tile = map.get(pos))
    map.unlock(*tile);

  const auto remaining = map.remainingKeys();

  if (remaining.empty())
    return stepsSoFar;

  std::optional<size_t> result;

  for (const auto key : remaining) {
    if (const auto steps = stepsToKey(map, pos, key)) {
      if (const auto totalSteps =
              part1(map, map.get(key), stepsSoFar + *steps)) {
        result = [&] {
          if (result)
            return std::min(*result, *totalSteps);
          return *totalSteps;
        }();
      }
    }
  }

  return result;
}

} // namespace

TEST_CASE("day18") {
  constexpr char input[] = R"(#################################################################################
#.......#.......#..q..W...#..n......F...#.......#...#...#.....#.....#.#.......#.#
#.#######.###.###.#####.#.#.###########.#.#####.#.#.#.###.###.#.###.#.#.#.###.#.#
#..x........#.....#...#.#.#.#.........#.#...#...#.#...#...#.#.....#.#...#.#...#.#
###########.#######.#.#.#.###.#######.#.#.#.#.###.#####.###.#######.#.###.#.###.#
#...#...#.......#...#...#.#...#.....#.#.#.#.#.....#...#...#.#.......#.#..b#.#...#
#.#.#.#.#######.#.#######.#.###.###.#.#.###.#####.#.#.###.#.#.#######.#.###.#.#.#
#.#...#...#.....#.#.....#.#.#...#.#.#...#...#.....#.#...#...#.....#.#.#.#...#.#.#
#.#######.#######.#.#####.#.#.###.#.###.#.#########.###.###.#####.#.#.#.###.###.#
#.......#...#...#.#.........#...#...#...#.#...........#.#.......#.#...#...#.#...#
#.#####.###.#.#.#Z#############.#.#####.#.#.###########.#.#######.#.#####.#.#.#.#
#.#.....#.#.#.#...#...#.........#.#...#.#.#.....#.......#...#.....#.#...#.#...#.#
#.#.#####.#.#.#####.#.#.#########.#.#.#.#.#####.#.#######.###.#####.#.#.#.#####.#
#.#.#c..#...#...#...#.#.........#...#.#.#.#.....#.......#.#...#.#...#.#.#...#...#
###.#.#.#.#####.#.###.#####.###.#####.###.#.###########.#.#.###.#.###.#.###.#.###
#.G.#.#...#...#.#.#...#...#.#...#...#...#.#.....#.......#.#...#.#...#.#.#...#.#.#
#.###.#####.#.#.#.#.###.#.###.#####.###.#.#.#####.#####.#.###.#.###.###.#.###.#.#
#.#.........#.#.#.#.....#...#.#.....#...#...#...#...#...#.#.#.#...#.....#k..#.#.#
#.###########.#.#.#########.#.#.#####O#######.#.#.#.#.###.#.#.###.#####.###.#.#.#
#.#...#...#i....#...#.....#...#.....#.#.#.....#.#.#.#...#...#.#...#...#.#.D.#.#.#
#.#.#.#.#.#####.###.###.#.#####.###.#.#.#.#####.###.###.###.#.#.#.#.#.#.#.###.#.#
#.#.#...#.#...#.#.#...#.#...#...#...#...#...#.......#...#...#.#.#.#.#...#.#...#.#
#.#.#####.#.#.#.#.#####.###.#.###.#####.#.#.#############.#####.###.#####.#.###.#
#.#.....#...#.#...#...#.#...#...#.....#.#.#.......#.......#.....#...#.....#.#...#
#.#####.#####.###.#.#.#.#.#########.#.#.#.#######.#.#######.#####.###.#####.#.#.#
#.....#.#.....#.....#...#.........#.#.#.#.#.....#.#...#.........#...#...#.....#.#
#.###.#.#.###.###################.###.#.###.###.#.###.#.#####.#.###.###.#########
#.#.B.#.#.U.#.#.....#.......#...#.....#.#...#.....#...#.#...#.#...#...#...#.....#
###.###.###.#.#.###.#.#.#####.#.###.###.#.#######.#.#####.#.#####.###.###.#.###.#
#...#...#...#.#..a#.#.#.......#.....#...#...#...#.#.......#.....#......h#...#.#.#
#.#.#.###.#######.#.#################.###.#.#.#.#.#############.#########.###J#.#
#.#.#.#.#.#...#...#.#.......#.......#...#.#...#.#.#.....#.....#.....#...#.....#.#
#.###.#.#.#.#.#.###.#.#####.#.#####.###.#.#####T###.###.#.###.#####.#.#.#####.#.#
#...#...#...#...#.#.......#.#.....#..y..#.#...#...#.#.#.....#.....#...#.#.....#.#
#.#.###.#########.#########.#####.#########.#.###.#.#.#######.###.#####.#######.#
#.#...#.#.....#.....#.#.........#...#...#...#.....#.......#...#...#...#...#.....#
#.###.#.#.#.#.###.#.#.#.#.#########.###.#.###.###########.#.#######.#.###.#.###.#
#...#...#.#.#.#...#...#.#.#.......#...#.#...#.#.........#.#.#.......#u..#.R.#.#.#
###.#######.#.#.#####.#.###.###.#####.#.#.#.###.#######.#.#.#A#########.#####.#.#
#...........#...#.....#.......#...........#...........#...#...........#.........#
#######################################.@.#######################################
#.#...........#.......#...#.....#...#.......#...........#...............#.......#
#.#.#######.#.###.###.#.#.###.###.#.#.#.#.###.#####.#.###.###.#.#######.###.###.#
#...#r......#.....#.#...#...#.....#.#.#.#.#...#...#.#.#...#.#.#.#...#.......#...#
#####.#############.#######.###.###.#.#.#.#.#####.#.###.###.#.###.#.#############
#j..#.#.......#...........#...#...#...#.#.#.....#.#...#.....#.....#.#.......#...#
#.#.#.#####.#.#.#######.#.###.#########.#.#####.#.###.#####.#######.#.#####.#.#.#
#.#...#..d#.#...#.....#.#...#.#.....#...#.....#.#...#...#...#....m#.#.#e..#...#.#
#.#####.#.#.#####.###.#.###.#.#.###.#.###.#####.#.###.###.###.###.#.#.#.#.###.#.#
#.#.....#.#.....#.M.#.#...#.....#...#...#.#...#...#...#...#.#...#.#.#.#.#...#.#.#
#.#.#####.#####.###.#.###.#######.#####.#.#.#.###.#.###.###.#.###.#.#.#.###.###.#
#.....#...#...#...#.#...#.#...#.......#.#...#.....#.#...#...#.#...#...#.#.....V.#
#.#####.###.#.###.#.###.###.#.#######.#.#.#########.#.###.#.#.#.###.###.#######.#
#.#.#...#...#.#...#.#.S.....#.....#.#.#.#t#.........#...#.#.#.#.#.#.#g#...#.....#
#.#.#.###.###.#.###.#############.#.#.#.###.#######.###.#.#.#.#.#.#.#.###.#####.#
#...#.#...#...#...#...#...#...#...#...#.#...#.....#...#.#.#.#s#.#.#.....#.#...#.#
#####.#####.#####.###.###.#.#.#.###.###.#.###.###.#####.#.###.#.#.#####.#.#.#.#.#
#.....#...#.#...#...#.#.N.#.#.#.#.#.....#.....#.#.#.......#...#.#...#...#...#.#.#
#.###.#.#.#.#.#.#.###.#.###.#.#.#.#####.#.#####.#.#.#######.###.#.###.#######.###
#.#...#.#.#...#...#...#.....#p..#.....#.#.#.....#.#.#...P...#l..#.#...#.....#...#
#K#####.#.#.#######L###.#########.###.#.#.###.#.#.#.#.#######.###.#.###.#####.#.#
#.#.....#.#.#.....#...#...#.....Y.#.#.#.#.....#.#.#.#.#.#...#.#...#.....#...#.#.#
#.#.#####.#.#####.#######.#######.#.#.#.#.#######.#.#.#.#.#.###.#.#####.#.#.###.#
#.....#...#...#.......#.#...#...#o..#...#.#.....#...#.#.#.#.#...#.......#.#.....#
#######.#####.#.#####.#.###.#.#.#########.#.###.#####.#.#.#.#.###########.#####.#
#.......#.....#.#.........#...#.........#.#...#.......#...#.........#.....#...#.#
#.#######.#####.#.#####################.#.###.#######################.#####.###.#
#....v..#.......#.#...........#...#.....#...#.#.........#.............#.#.C.....#
#.#####.###########.#########.#.#.#.#########.###.#####.#.#############.#.#######
#.#...#.....#.......#.........#.#...#...#.....#...#.....#.......#.......#.....#.#
#.#.#.#####.#.#######.#######.#.#####.#.#.#####.###.#####.#####.#.#####.#####.#.#
#...#.#...#...#.....#.....#...#.#.....#.#....f..#.#.Q...#.#.....#.#...#.....#...#
#####.###.#######.#####.#.#####.#.###.###########.#####.###.#######.#.#.###.###.#
#.....#.....#...#.#...#.#...#...#...#...#.#...........#...#.#...#...#...#.....#.#
#.#####.###.#.#.#.#.#.#####.#.#########.#.#.#####.###.###.#.#.#.#.#######.#####.#
#...#.H.#.....#.#.#.#.....#.#.#...#...#.#...#...#.#.....#.#...#.#...#.....#...#.#
###.#.#.#######.#.#.#####.#.#.#.#.#.#.#.#.#####.#.#######.#####.###.#######.#.#.#
#.#.#.#.....#.#.#.#.....#...#...#...#.#.#.#.....#.......#.......#..w#......z#.I.#
#.#.#######.#.#.#.#####.#############.#.#.###.#X#######.#########.###.###########
#.......E...#.........#.................#.....#.......#.........................#
#################################################################################
)";

  Map map(input);
  std::cout << part1(map, map.get('@'), 0).value_or(0) << '\n';
}
