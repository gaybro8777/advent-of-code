#include "aoc_overloaded.hpp"

#include <catch2/catch.hpp>

#include <algorithm>
#include <charconv>
#include <iostream>
#include <map>
#include <span>
#include <sstream>
#include <variant>

namespace {
auto constexpr test_input = R"(2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2
)";

auto constexpr input = R"(8 * 6 * 6 * 4 * (8 + 5 * 2 + 5 + 6 + 3) * 4
((8 * 2 * 7 + 6 + 2 * 7) * 8 * (9 + 8 * 9 * 2)) + 8 + 2 * ((8 + 5 * 7 + 8 + 9) + 4 * (4 * 5 + 9 + 6 * 8) + 9 + 6 * 7) * 5 + 7
(3 * (6 * 4 * 2 * 2 + 3) + 9) + 4 + (6 * 2 + (8 + 4 * 8 * 4 + 8)) + 5
9 + (4 * 7 + 6)
6 + (3 + (5 + 7 * 5 + 5 * 3 * 7) * 6 * 8 + 5 * 2) + (7 + 9 * 9 + (3 + 9 + 8 + 2 * 6)) * 8
5 + (7 * 9 + 7) * 8
6 * (5 * (9 + 8 + 9 + 8 * 5 + 4) * 3 * 8 * 2 + 9) * 5 + 8 * (9 + 3 + 9 + 9 * 6) + 9
(9 + 8) * 2 + (2 * 3) * 4 + (3 * 7 + 5 + 6 + 8)
3 * ((4 + 9 + 5 + 3) * 9) * 4 + 6 + (9 * 7) * 6
4 + (3 * 2 + 5 * 9 * 3 + 8) + 4 * 8 * 6
5 + 6 * 6 * ((9 * 8 + 6 + 8 + 4 + 3) * 9 * 6 * 5 * 4) + (4 + 7 + 6 + 8 + 2 * 6) * ((2 * 3) + (9 * 5 + 3 * 3 + 3 * 5) * 6)
9 + 7 + 8 + (8 + 9 * 4 + 3 + 9 * 4)
(6 * 5) * 8 + 9 * 3 * 7
(9 * 9 * 8 * 6 + 7) + 7 + 7 + 5 * 4 + (6 * 5)
(8 * (4 + 6 * 4) * 8 + 4 * 8) + 7 * 8 * ((9 * 8 + 3 * 9) + 3 * (9 * 5) + 5 * 5) + 4
3 * 9 + ((6 * 5 + 7 + 6 * 9 + 6) * (9 * 3) + (5 * 2 + 5 + 6 * 3) * 8 * 7 * 8)
7 * (3 * 2 * 9 * (8 + 3 * 9 + 2 + 6 + 3)) + 7 + 8 + (3 * 2 + 4 * 9 + (8 * 2 + 3 + 2 * 6 * 8) * 6)
3 + 6 * 9 * (3 + 9 * 3 * 3) + 6
9 * (9 * 2 + 8 * 4 + (9 * 8 * 6) + 9) * (3 * (4 * 4 * 8 + 6 * 5 + 7) * 5 + 8 + (2 * 8 + 4) + 9) * 2 * (4 + 2 + 4) + 9
(2 + 8) * 3 * (8 * 4 + 7 * 8 * 4)
5 + (4 * 5 * (6 * 7) + (5 * 8) + 4 * 8) * 2
9 * 3 * 8 + (9 + 3) * 9 + ((7 + 4 * 4) + 3 + 9 * 6 + 2)
((6 * 2 + 7 + 9) * (8 * 8) + 2 + 8 + (7 + 8 + 7 + 7 * 4)) * 2 + 6 * 5
(9 + (3 + 2 * 3 * 5 * 7 + 6)) * 6 + 8 + (6 + 3 * (4 * 4))
8 * 8 + (6 + 6 * 2 * 5) * 6 * 3
(6 * 9 * 5) + 3 * (7 + (6 * 3 + 7) * 3) + (2 * (3 * 7) + 5 + 3 + 6 * 7)
7 + 8 * 5 * (8 + 7 + 7 + (9 + 4 + 8 * 8 + 7) * 2 * (4 + 4 + 5 * 2 * 6)) * 6
(8 + 7 + 4 * 2 + 3) + 9 + 9 * (8 * 2)
(5 + 5) + 7
(7 * 9) * 8 + 9 * (8 * 6 + 5 + (7 * 4 + 4 + 4)) * 6
3 + 5 * 2 + 5 * 3 + 9
7 + (4 * 5) + (3 + 3 * (3 * 3) + 2) * 2 * 3 * (9 * 8)
((9 + 7 * 5 * 8 * 4 + 5) * 5) + 7
(9 * 4) + (6 + 7 * 8 + (7 * 5 * 8 + 6 + 4 * 5) + (5 * 9)) + 2 * (7 + 3 + 5) + 7 * 3
(2 * 5 + 4) * (5 + 2 * 6 * 2) + 8 + ((5 + 3 + 2 + 6 * 3 + 6) * (7 * 9 + 7 + 4)) * 5
(7 + 9) * 2 * 6 + 8 + 5 * 6
8 + (4 + 4) * 6 * (6 * 3 * 6 + 2 * 6 + (8 + 2 + 9 * 4 + 6 * 6))
7 + 6 + 5 * 5 + 6 + (5 + 3 + 3 + 9 + 4)
2 * ((6 + 9 * 4 + 9) * 8 + 8 + 4 * 2 + 2) + 3 + ((2 + 6 * 3) * 6 * 4 * 5 * (4 * 6 * 9)) * 3
5 * (2 * 8 + 9 + (4 * 8 * 3 * 5) * 6) * ((7 + 4 * 4 * 6) + 7) + (4 + (8 * 8 + 5 + 2) + 4 + 3)
8 * (2 * (4 + 5 * 4 * 6) * 6 * 3 * 6 * 3) * 4 + 2 + 5 + 4
(8 * 4 * (8 + 4) + 8 + 2) * 8 + 6
3 + 6 + 7
(4 + 5 * 4) + 8 + 5 + 8 + 7 + 9
9 + (8 + 6 + 3 * 7) + 7 + 5
2 + (5 + 3 + 7) + (4 + 6 * 8 + 8 + 4 + 6) + (3 + 2 + 7) + 2 + 7
4 + 6 + 8 + 9 + 3 + 3
(5 * 8) + (5 + 9)
7 * 6 + 6 + 9 + 6 * ((6 * 5) + 9 + 2 + 5)
7 * 3 * (4 * (5 * 2 * 8 + 6 + 5 + 5) + 8 * 7 * 7 * 9) * (2 * (4 + 8 + 7) * 9 * 8 + 6)
3 + (4 * 6 * 4 * 5 + 4 + 3) * 3 * 5
4 + 4 * 5 * 5 * 7 * ((5 + 5 + 6 + 3 + 9) + 4 * (2 * 2 + 8 + 9) * 8)
8 + 7
(5 * 6 + 2 + 9) + 8
(6 * 2 * 7 * 6 + 9 + 5) + 8 + 3 * 8 + 5 + (5 + 6 * (9 * 8) * 7)
(4 + 9 * 7 + 9) * 7 * (7 + 2 + 9 + 9 * 6) * 9 * (3 * 2 * (9 + 6 + 3 + 8))
(5 * 8 + 6) + 2 + 4 * 4 * 3 + (7 * (9 + 9 + 6 + 5 * 7 + 3) + 4 + 9)
4 + 2 + (9 + (4 * 6 * 8 + 5 * 8) + 3) + 3
(8 + 7 * 2 * 9 * 8 + 5) + 3
(9 * (7 * 5 * 8 * 5 + 7)) + 8
5 + ((2 * 5 * 8) * 6 + 7 * 8 + 4 * 6)
8 * 4 + 3 + (5 * 6)
(8 + 4 + (8 + 2 + 7 + 4) * 5) + (2 * 5 * (9 + 9 + 3) * 7) + 6 * 6
((6 + 6 + 5 + 7) + 2) * 5
(4 + 5) * 7 * (3 + 6) + 3 * 9 * 7
((5 * 7 + 2) * 3 + 4 + 2) * 8 * ((4 + 9 * 7 + 2 * 9 * 3) + 8 * 5 * (6 * 4 + 3) + (3 * 8 * 2)) + 4 + 7 + 3
2 + 8 * ((5 * 2 + 8 + 4) + 4 * 3 * 8) * 7
9 * 3 + 3 * 5
5 * 5 + (3 * 5 + 3 + 6 * 9) + 6
5 * 9 * (2 + (7 * 7 * 5 * 7) + 9 + 5 * (3 + 2) * 9) * ((4 + 8) * 5 * (8 + 9 * 4 + 7) * 9 + 8 * 3)
2 * (9 + 4 + 4) * 5 + 6 * 7
4 + 7 + 6 + 4 * 4 + (2 + 8 + 7)
(4 + 4 + 9 + 2 + 5) * (6 + 8 * 9 * 6 * 7 + 5) + 6
3 * ((4 + 9 * 6) + (9 + 6 + 3) * 6 + 3 * 4 * (6 + 6 + 5 + 9))
6 + 4 * ((2 * 5 * 4 + 5 + 8) * 3 * 9 + 4 + 4 * 2) + 4 * 2 * 3
(6 + 6 + 6 + 5 + 8) + 4 * 4 * ((7 + 2 + 9 + 2 * 8 + 3) * 2 + (5 * 8 + 7 + 7 * 7 + 6) + 7 * 2) * 2 + 7
2 + 4 * 4 + ((7 * 5 * 4) * 9)
6 + 3 * 2 + 4 + 8
7 * 6 * 5 + 5 + (6 + 4 * 9 + 7 * 2) * 6
9 * 3 * (8 + (6 + 4) * 8)
6 * ((3 + 4 * 8 + 5 * 6) + 5 + 9 * 6 * 2 + 5) * 4 + 9 + 2
4 * (4 + (4 * 7 + 5 + 6 * 2 + 3) * 2 * 6) * 3 + 8 * 3 + 2
(4 * 8 + 8 * 9 * 7) * 9 * 3 * 4 * (2 * 3 * 6 * 7 + 8 * 7) + 8
(2 + 3 + 8 + 2 + 4 * 7) * 6 * (8 + 3 + 3) + 7 + 7 + 2
(8 + 5 * 5 + 5 + 5 * 5) * 5 + 7 * 6
4 * 6 * 4 * 9 * 6 * 6
(5 + 2 * 7) + (7 + 5 * 9) * 7 + 7 + 2
((2 + 9 * 3 * 3 + 8) + 7) * 2 * (3 * 9 * 4) * 5 + 5
((3 * 8 * 8 + 3 * 3 + 4) * 7 * 6 + (7 + 8 * 7 + 5)) + 8 + 9 * 2 * 6 * 9
((9 + 3 + 9) + (9 * 5 * 7 * 7 * 4) * 2 + 7 * 7 * (6 * 5 + 2 + 3 * 3)) + 8 + (5 * 2) * 4
(4 + (6 * 7 * 4 * 6 * 7 * 5) * 6) + 9 + 5 * 5 * 9 * 2
9 * 4 + 8 + (8 * 2 + (9 * 3 * 7 * 6) + 5 * 4 + (6 * 7 * 6 * 4)) * 9
(4 + 9 + 4 * 7 * 5 + (7 * 3)) + 9 + 7 * 6
5 + ((5 + 8 + 4 * 3 * 3 * 8) + 6) + 7
8 + 7 + 9 + 5 + (3 * 9 * (3 + 9) + 5 * 8 + 7)
2 + 9 * (3 + 3 * (4 + 7 + 5 + 4 + 3 + 9) + 4 + 7 * 2) * 8 * 3 * 6
5 + 6 + ((6 * 8 + 8 + 2 + 4 + 4) * 2) * 6 * 4
(9 * 2 * 5 + 2 * 2) * (4 + 5 + 3)
8 * 8 * (3 + 4) * 9
((9 * 4 + 4) + 3 + (7 + 7 + 2 + 3 + 5) * 8) * 4
7 * 9 * 6 * (9 + 9 * 3 * 7 * (7 + 6 + 2) * 7)
7 * (2 * 3 * 7 + 3 * 8)
7 * 3 * 5 + 7 + 8 + 8
(7 * 7 * 8) + 6 * (3 + 3 * 9 + 9 * 6) + 4 * 8 + (2 * 3 + 8 + 2 * 7)
(7 * (2 + 3 * 4) + 6 + 5 * 8 + 2) + (5 * 2 * 5 * (4 + 5 * 5 * 5 * 7 * 5) * 7) * 6 + 3 + 4 + 6
((5 + 2 * 7 * 4) + (9 + 4 * 6) + 9) * 8 + 3 + 4 + 3 * 3
((6 * 6) * (7 * 6 * 6) * 7 * 4 + (4 * 3 * 7 + 5 * 3)) * 8
(7 * 3 + (3 * 5 * 6 + 7) * (3 + 9 + 6) * 3 * 4) * (8 + 6 + 4 * 9) * 6 * 3
8 + 2 * ((2 * 2 * 7) * 3 + 9 * (8 + 8) * 8 * 9) * 4
6 + (3 + 5 + 7 + (6 * 4 + 4 * 4)) * 2
2 + 5 * 3 + (5 + 9) + 4 + 3
(7 * 7 * 8 + 8 + (5 + 9 + 2 * 6 + 4)) * 7 * (6 * 4 * 5 * (2 * 8 + 2 + 6 * 7 + 7)) + 4
(3 + (2 * 9 * 8 + 7 + 2 * 8) + 9 + 9 + 5) * 4 * 8 * ((7 + 5 + 2) + 8) + 5
2 + 4 * 2 * 5 + 9 * (3 * 5 * (6 + 6 + 5 * 2))
(4 * 5 * 5 + 5) + 4 + 9 + (6 + 6 + 4 + 4 * 8 + 7) * 5
(2 + (6 * 5 + 4) * 4 + 5 * 2) + 7 + 4
2 + 2 * ((2 * 4 + 5) * (7 * 7 + 3 + 8) + 7 * (7 * 5 + 3 * 6 + 9 * 2))
5 + (5 + (4 + 7 * 8 * 2 * 4) * (8 + 7 * 9) + (2 + 5 * 9) + 4 * 8) * 9 * 2
(7 * (9 + 2 + 3 + 4) * (5 * 2 * 2 + 8 + 5) + 8) + 6
9 * 5 + 2 * 8 * 3 + ((7 * 7 * 9 + 7 * 2 * 9) + 9 + 2)
4 + 3 + 3 + 3 + 5
(3 * (8 * 6 * 7 + 7 * 5) * 2 * 6 * (5 + 8 + 8 * 3 + 9) + 9) + 6
(7 + 3) * 6 * (2 * 6 + (3 + 9 * 5 * 6)) + 3
9 + (5 + (2 * 3 + 2 + 8) + 6 * (6 * 9 + 8 * 8) * 4 * 7) + 5 + 8 + (9 * 8 + 4 * 3 + 9) + 8
5 + (2 * 2 + 2 + 8 + 5 * 6) * 7 * (5 * 5 + 2 + 8 + 4) * 2 * 6
(5 + (9 * 5 + 5 + 7) + 2) * 3 * 8
4 * 5 * 5 * (7 * 9 * 3 * (4 + 9)) + 2
9 * 4 * 8 + ((3 * 4 * 2 * 6) * 8) * 9 + (6 * 9)
9 * (6 + 2) * (4 * 9 * 3) + 2 + (9 * (8 * 2 * 3 + 5) + 2 + (3 + 7 + 7)) + 3
9 + 5 + 8 + (5 * 9 * 4 * 3 * 5)
5 * ((2 * 4 + 5 * 7 + 9 + 5) + 8 + 3 + (4 * 4 * 3 + 8 * 4) * (7 + 7)) * (3 + 3 * 9 + 8) * 4 + 3 * (4 * (7 + 5 + 7) * 2)
(3 + 3 + 9) + (3 + 9 + 7 * 4 + 9) + 4 * 6 + 6
8 + 9 + (5 * 3 * 7 + 5 * 8) + 3 + (6 + 2 + 9 * 4 * (5 + 2 * 3))
((2 + 8 * 4 * 6) * 6 + (9 * 6 + 3) + (5 + 4) + 6) + 4 * 3 + 6 * (8 + 9 + 3 * (6 + 5 + 3 + 9)) * 9
4 + (5 + 2 + 3 + 9 + (8 * 3 + 8) + 8)
(6 + 8) + 7 + (9 + 5 + (5 * 8 + 9) * 9 * (3 + 2))
2 * (2 * (4 + 6 + 9 * 8 + 8 + 4) + 7) + ((3 * 9 + 6 * 6) * (6 + 8 + 5 + 4 * 3 + 6)) * (8 * (4 + 9 * 5 + 5 * 6) + 7 * 8 + (7 + 2 + 5) * 2) + (5 * 6 * 9 * 3 * 2) * 2
5 + 2 * (4 * 2 * 4 * (3 + 5 + 8 * 6 + 2) * 4) + 2 + (8 * 3) * 7
3 * 6 + 6
(5 * 9 + (3 * 7 + 7 * 7 * 2 + 8) + 9 * 4) * (6 + 3 + 4 * 3) + (5 + 7 * 2 + (9 * 3) * 3 + 9) + (4 + 4 * 6 + (2 + 9 * 9 + 3 + 8 * 5) + 9) + 7
(8 + 3 * 3 * 5 * 7 * (4 * 9 * 4 * 2)) * 8 + 3 * 3
(2 + 7 * 4 * 8 + 5) * 6 * 6 * 6 + (9 + 2) * 8
((5 + 4 + 6 + 4 * 4) * (2 + 5 + 2) + 8 * 2 * 3 + (9 + 4 + 8 * 6 + 8 + 2)) * (2 * 6 * 4 * 4) + 2 + 5
(8 * 5 * 2 * 4 + 8 * 5) + ((8 * 9 + 5 * 4 * 9 * 2) * (2 + 7 + 3 * 9) * 4 * 8)
(4 + 4) * 6 * 5 * (2 + 2 * (4 * 6 * 7 * 2)) * 8
4 + 8 + 4 * 4 * (4 * 4 + 4) + 6
8 + 5 + 6 * (9 * 8 + 9 + 4 * 3 + 4) * ((6 * 7 * 6 * 6 * 2 * 5) * 3 * 8 * 3)
2 * 2 + ((9 + 6 + 6 + 5) + 5) * 4
7 * ((6 * 3 + 7 + 5 + 5 + 7) + 5 * 3) + (4 + 8 * 9 * (7 * 2 + 2) + (8 * 3) * 5) + ((7 * 3 * 4) + 6 + 2 + 5) + 9 * 6
6 + ((2 * 4 * 9) * (6 + 6) + 6 * 5 * 6 * 6)
8 + (3 + 8 + (3 + 3 + 8 * 5 * 6 + 2) + 4 * 2 * 9) + 7
(8 * 4 + 7 * 8 + 6 + 6) + 9 * (5 * 8 * 6 * 3 * 9) + 2
6 + (2 + 2 + (2 + 7 + 5) * 8)
7 + 6
7 * 5 + 3 + (8 + (9 + 7 + 5 + 2 * 6)) * 8 + 5
(8 + 5 * 6 * 7 + 6) * 5 * 7
6 * 6 * (9 + 4 * 4 * 9 * (9 * 6)) + 8 + 6
((3 * 4 * 6 + 7 + 4 * 6) + 2 * 4 + 7 * 9) + 8 * 8 * 8 + 7
(7 * 2 + 2) + 6
9 * 6 + 3 + 7 + 6 + (5 * 3 * 7 + 4)
(6 + 3) * (6 + 2 * 4) + (9 * 2 * 9 + 5)
8 * (9 * 7) * 9 + 5
(4 + (4 * 3) + 7 * 7 * 4 + 2) + 8 * 6 + 6
3 + 2 * 3 + 9 * (6 + 4 * 3 * (6 * 2 + 3 * 5 + 5 + 8))
5 + ((6 * 9 * 8 + 4) + 5 + (7 + 3) * (9 * 7 + 7 * 7 * 8)) * 3
((8 * 5 * 2 + 8 * 8 * 6) * 6 * (4 + 6 + 9 + 7 + 4 * 4) * 4 * 2 + 2) * 9 * 7 * 8 * 9
5 * 8 * 8
((7 + 7 * 2 * 7 * 4) + (5 + 3 + 5 + 6 * 8 + 4) * (7 + 9 * 3) * 7 * 4) * 5
((9 + 8) * (2 + 3 * 2) + 7 + 3) + 5 * (9 * (4 + 8) * 6 + (8 + 7) * (8 + 5) + 6) + 5 + (9 + (7 * 5 + 8 + 5 + 5) * 8 + 8 + 9)
(5 + 2 * (5 * 7 + 5 * 8 * 7) + 8) + 5
7 + 6 + (9 * 5 * 8)
5 + 3 + 4 * (2 + 9 + 5 * (4 * 6 + 6 + 7 * 8 * 4) + (3 + 3 + 4 + 2 * 3 + 5) + 6) + 8 * 4
3 + 2 * 7 + (7 * 7 * (9 * 9 + 7) + 5 * 8)
7 + 7 + (8 * 7) * 5 + (5 + 4)
(9 + 8) + 9 * 5
(2 * 2 + 3) + ((4 + 4 * 9 * 5 * 2 * 8) + 7)
2 + (4 * (7 * 4 + 4) * 6) + ((7 * 8) * (4 + 2 + 6 * 9 * 5) * 6) * (2 + (5 * 8 + 2 * 7) * (8 + 9 * 4 + 4 * 8 * 3)) * 9 + 9
7 * (7 + (2 * 2 + 7 * 2 + 6)) + 2 + 4 + 3
9 + (9 * 5)
(7 * 7 + 3 + 8) + 9 * 5 * 8 + (5 + (2 * 8) + 4 + (4 * 5 * 5 + 7) + (8 + 6 + 5 * 6 + 6) * 6)
3 * 7 + 9 * 6 * (2 + 9) + 3
(4 + 5 + (4 * 5 + 7)) * 9 + 2 + 6 * 2
(4 * 4 + 6 + 6 * 8 + 4) + (5 * 4) + 8 + ((3 * 5) * (7 * 5 + 3 * 2 + 5 + 4))
((8 * 5) + 3 * 5 * 8 + 2 + 7) * 6 + 4
9 * (8 + 4 + 4 * 9 * 9 + (3 + 6 + 9 * 9 + 4)) * 4 + 8 * 4 * 2
(2 + 9 * 8 * 8 + 6 + (4 + 4 * 5 + 5)) * 4 * 7 + (2 * 4 * 9) + 6 + 9
3 * 7 + 9 * (3 * 5 * 7) + 8 + 2
(8 + 5 + 9) * 5 + 3 + 3 + 3 + (3 + 3 * 9 + 9 + 4 + 3)
(2 * 9 * 7 + 9) * 3 + 8 + 9 + 3
(5 * (6 + 9 + 2 + 2 + 4) * 9 + (4 + 9 * 3 * 4 * 8)) * 4 + (6 * 2 * (4 * 7 + 3) + (7 + 7 + 3 * 8 + 5 * 6) + 5 * 4)
8 * 8 * 7 * 5 * (6 + 7 + (7 * 7 + 5 * 6 + 8)) * 2
7 * 5 + 5 * 5 + 4 * ((2 * 2) * (7 + 3 * 9 + 6 + 8 + 3) + 9 + (8 * 9) * 3)
9 * 3 + ((7 + 9 * 4 * 5 + 4 * 7) * 6 + (4 + 5 * 5 + 3 * 9) + 8) * 9 * (2 + (5 * 6 * 6 + 3))
5 + ((4 + 6 * 6) + 2) + (2 + 4 + (9 + 4) + 7 * (6 + 3 + 2) + 2) * 8
(9 * 3 + 5 * 8 + (4 + 4 + 2 * 7) * 4) * 3
4 + 4 + 5 * (5 + 4 * 2 + 9)
8 * 7 + 4 + 4 * (6 * 7 + 9 * 2 * 9)
(3 + 2 + 4) * (3 + 9 * 6 * 4 + (7 * 9 + 2 * 8)) * 9 * 7
6 + 5 + (7 * (5 * 2 + 4 * 5 + 8 * 4) + 7 * 6 + 3 + 8) * 7 * (6 * 9 * 4 * 7) + 2
5 * (4 + (5 * 7) * (3 + 4) * 4 + 9) + 5 + 9 + 8
((8 + 3 * 8 * 9 + 9 * 4) + 7 + 5 + 4 + 6 * (5 * 8 + 7 + 8 * 3 + 2)) + 6 * 2 + 4
3 * ((3 + 7 * 9) + (5 * 4 + 6 * 5 * 2) * (6 + 5) + 2 * 5 + (4 * 7 + 2 * 3))
(9 + (3 + 3 * 5 + 4 + 6 * 2) + 9 * (4 + 5)) * 8
5 + (4 + 5 + (9 * 4) * 4 + 6) * 3
(8 + 6) * 4 * (9 * 5 + 6 * (4 + 6 + 2 * 4 * 4)) * 2 * 4
8 + 5 + 9 + (2 * 5 + 7) + 2 * (9 * (2 * 6) * 6 + (5 + 3 * 9) + 7)
9 + 2 * 6 * (4 * (4 + 8 + 6 + 2 * 5 + 4))
7 * (2 + 9) + 5 * 7 + 6 + 6
((2 + 5 * 9 + 4 * 4) + 8 + 8 + (3 + 4) + 7) * 5 * 3 * 4
7 + 4 * (8 * (5 * 5 * 3) * 5 + 8 + 6) + 8
4 + 5 + 6 + (3 * 5) * 5
5 + 7 * 6 * (8 * 3 * 9 + (9 + 3 + 3 * 8 * 4 + 9))
(5 * 6 + 3 * 5 + (8 + 3 + 7 + 3 * 2 * 6) + 9) + 9 + 2 + 7
((2 * 5 * 9 * 4) * 9) * (7 * 4 * 9 + 9 * 8)
9 * 7 + (9 * 3 * 6 + (6 + 5 + 9 * 5 + 6 + 4) * 8)
4 + 6 * 3 + (7 + 6 + 5 * 6 + 8) * (7 * 6 + 9 + 8)
9 + 2 + (6 + 3) + 3 + 3 + 2
(5 + (2 + 9 * 2) * 3) * (6 * 3 * 4 * 3 * 9 + (6 + 3 * 8 + 9 + 6 + 2)) + 8 * (7 * 3 + 3 * 9) * (6 + 6)
8 * 4 + (6 * (8 + 9 * 7 * 6 + 4)) * (8 + 7 * 9)
9 + (6 * 2 * 5 * 3) + (9 * 9) * 3
(3 + 4 * 8 + 7 + 9 + (5 * 6 * 8 + 2)) + 8
2 * 6 * (4 * 9 + 5 * 2 * 8)
4 + (9 * 6) * 5 + ((5 + 2 * 3) + 4 + 4)
((5 * 7) * 9) * (8 * 8 + 9 * 9 * 5) + 9
2 + 5 * 3 + 8 * 3 + 3
3 + (3 + 9) * 9 * 4 * 5
9 + 6 + 7 * 7
5 * 7 * 5 + 9 + (4 + 9 * 8 * 9 + 9 + 3)
8 + (3 + 4 + 5 + 6) + ((4 + 7 * 9 * 6 * 5 * 9) + 4 + 2 + (2 + 5 + 5 * 7 * 7) * 3) + 9
6 * ((8 * 8 + 6) + (7 + 9 + 6 + 9 * 9 * 6) + (8 + 4 + 9 * 3 * 4)) + 5 + (5 * 9 + 5)
9 + 4 + (5 * (6 + 7 * 9 + 5 + 4) * 7)
(5 + (2 + 6 * 9 + 7) * 5 + 9 * 8) * 8 * (3 * 8 * (5 * 4) + 5) * 6 * (4 + 2 * (2 + 9 + 2))
6 + 9 * (7 * 2)
3 + 4 + 4 + (9 * 9) * (8 + 4 + 7 * (7 * 4 + 6) * 3 + 4) * 9
(4 * 8 + 7) + 8 + 7 * (8 * 3 + 7 * 9) + 8 * 8
((6 * 2 * 4 + 3 * 3 + 3) * 3 * 7 + 7 * 5) + 8 + 5
(6 * 3 + 3 + 4 * 9) * 5
6 * ((8 + 7 * 2) * 6 + (4 * 8 + 2 + 7 + 4 + 3) + 9)
7 + 6 + (7 + 7 * 6 * 7) + 5 + 6 + (4 + 8 * 9)
5 * 8 * 3 + (6 + (8 * 2 + 5 + 9 * 9) + 3 + 9) * (6 * 4 + 5 * 6 * 4)
2 * (8 * 4 * 2 * 4 * 7 + 8) + (6 * (6 * 4 + 6 * 7 + 8 + 8) + 3 + 4) + 7
8 * (5 * 7 + 5 + (3 * 3 + 6))
9 * (9 + 6 * 8 * (6 * 8 * 9 * 7)) * 7 * 4 + 8
9 + (5 + 4 * (8 + 8 * 8 * 9 * 8) * 5 * 5) + 3 + 6
2 + 6 + (8 * 7 * 2 * 3 + 7) + 2 * 7 * 8
9 + 2 + 4 * (3 * 4 * (2 * 5 + 9) * (3 + 6) * 5) + ((6 * 7) * 4 * (8 * 9 * 4 * 4 * 9))
6 + 8 * (3 * 8 * 8 * 5 * 8 * 3) + 8
6 * 5 * 4 + 6
4 + 4 + (2 + 8) * 4 * 4
(4 * 9 * 8 * 4 + 3 * 4) * 6 * 2 * 5 * (4 + 8) * 5
6 * (3 * (2 * 4 + 7)) + 8 * 7 + (5 + 6 + 7 * 3)
((2 + 6 + 8 + 3) * 6 + 2 + 6 + 2 * 3) + 9 + 8
(8 + (8 + 2 + 9 + 7 * 3) * 3) * ((5 + 8 * 5 + 6 * 3) * (2 + 3 * 7) + 7 * 7 * 4)
9 + ((7 * 2 + 9 + 3) * 7 + 2 + 2 + 2) * (2 + 2 + 8)
(4 * 7 + 7 * (9 + 2 + 3 + 8 * 9 * 3) * (3 + 3 * 7 + 4)) * 8 * 9 * 9
6 + 9 * 2
9 * 7 * (9 * (6 * 5 * 2 * 3 + 4 * 8)) + 9 + 7
2 * 4
(2 + (2 * 7) + 4 * 5) + (3 + (2 * 2 * 5 + 2 + 7 * 7)) + 2 + 9 + 6 * 4
(4 * 6 + 2 * 7 + 7 + 6) + ((8 + 3) + 4 + 7 + 8 + (9 * 9 * 2 * 5 * 8 + 7))
8 * 2 * (8 + 3 * 5 + 8) + 4 * 4 * (5 + 2)
6 * ((3 + 4) + (2 + 4) * 7 + 2) + 4 + ((9 * 4 * 7 + 8) + 5 * 9) * 7
7 + 9 + 4 * 2 + ((5 + 8 * 7) * (5 + 6 * 8 + 6 * 3) * 2)
6 + (6 * 7 * 5 * 8) * 5 * 7 * 6
(4 * 3 * 8 + (9 * 8 + 3)) * 5
3 * (9 + 9 * 5 * 4 + 7 * 4) * 2
((2 * 8 * 7 * 4) * 6 * 5 + 2 * 3 * 6) + (4 + 2 + 7 + 9 * 5) * 8 * 5
((4 + 3 + 9 + 4) * 8 + 3 + 9 * (9 + 5) * 2) + 2 * 9 + 3 * 7 + 3
(3 + 3 * 3 + 7) * (4 * 5 + 8 * 4 * 9 + 4) * 6 * 4
5 * ((6 * 4) + 7 + (3 * 9 * 5) * 5) * ((6 + 9 * 4 * 2 + 3 + 4) * 8 * 8 + 8 + 9 * 5)
(7 * 9) + 3 + (8 * 2)
3 * ((2 + 8 + 5 * 8) * 8 + (5 * 4 * 9 * 3) + 4) * (8 + 6 + 9) * 7
(9 + 7) * ((8 + 2 * 4 * 2) * 5 + 3) * 5
4 + 6 + (4 * (4 + 6) + 8 * (2 + 6 + 4) + 4 + 6)
((3 + 4 * 6) + 5) + 3 * 2
(9 * 3 + 8 + 5) + 8 + 2 * 6
9 + (3 * 4 * (7 + 2 * 2 * 8 + 6 + 2) * 2) + 9 + 8 * 5 + ((9 * 4 * 6 * 9 * 5 + 3) + 5 + 9)
4 + 5 * ((5 + 2 * 2) + 6 * 5) + (7 + 4 * 6)
9 + ((4 + 8) + (3 + 6))
9 * 7 * (7 * 9 * 6 + (9 + 5 + 7)) * 5 + (8 + 3 * (2 + 5 * 3 + 3) * 5) + 5
9 * (3 + 5 + 9 + (4 + 8) * (6 * 7) + 5) * 9
((9 + 8 + 9 + 6) + 8 + (5 + 4) + (8 + 2 * 4 + 7 * 7) + 5 + 7) + 2 + (8 * 3 * 6 * 4) + 2
5 * 6 + (8 * (7 + 4) * 3 * 8 * 9) + 8 + 4
5 * (8 * 8 + (4 + 7 + 5) * (7 + 5) + 7 + 8) * 6 * 3 + 5 * (4 + 3)
9 + 6 + (2 + 5 * (3 + 2 * 4) + 9)
(9 + 5 + 8) * 7 * 3
7 * ((7 * 6 * 4 + 7 * 5) + 6 + 9 + 3 * 2 * 6) + 9
(9 + (9 * 5) * 4 + (6 + 3 + 4 * 5) * 3) * 2 + (2 + (7 + 9) + (9 * 8)) + 8
3 + ((4 + 6) + (5 + 4 * 9 * 3) * 8)
9 * 7 + (3 + 2 * 9) * 8 * 7
(9 + 2 + 3 * 6 + 9) + (7 * 3 + 5) * 6 + (2 + 4 + (8 + 9 + 9) * (8 + 7 * 3 + 7 + 8) * 7) + 2 * (9 * (9 + 3) + 4 + (9 + 3 + 2 * 8 + 7 + 9) + (7 * 2 * 4))
6 + (3 * 6 + 7 * 6) + 3 * 3 * 5 + 3
(7 + (4 + 2) * 9) * 5 + 8 + 8
6 * 2 * (2 * (4 + 7 + 4) * (7 + 3 * 2 + 8) + 2) + ((6 * 7 + 6 * 3 * 4) * 3) * (8 + 4 + (5 + 4 * 2 * 8 * 3) * 4 * 4) + 5
3 + 5 * (7 + (8 * 9 + 6 * 7) * 9)
9 + ((5 * 2 * 3 + 4) * (9 + 3) * 7 * (5 + 4 * 9 + 3 * 6 * 6) + 9 * 7)
(2 * 7 * 4) * 8 + 5 + ((7 * 7) + 3 + (8 * 6 * 8 * 2)) * 5
(9 * 8 + 4 * 4 * 9 * (9 + 4 + 4 * 7 * 3 + 5)) * 6 * 5 * 4 + (6 * 3 + (8 * 6 + 4) + 9)
3 + 6 + 4 + (5 * 9 + 4 * 3 + 2) * 5 * 4
2 * (7 + 4 * 3) * (8 * 3) + 5 * 8
(5 * 6 + 3 + 8 + 6 * 6) + 7 + 6 + 6 + 6 + 3
5 + 3 + (4 + 4 + 9 + (9 * 9 + 5 + 2) + 8 * 9)
9 + 5 + (7 + (5 * 6 + 3) + 7 * 6) + 7
(2 * 7 + 3 + 4 + 6 * 8) * (4 * 5) + 8 * 5 + ((2 * 7 + 8 * 9 * 3 * 5) * 6 * 3)
2 * 7 * 6 + (8 * 6 + 6 * 4 + 5) * (8 + 9 * 6) * 9
8 * 8 * 6 + (9 * 5 * 4 * 8 + 3) + 8
(8 * 5) * 4 + 2 + 4
7 * 3 + (8 * 9) * (5 * (3 + 6 + 9 + 8 * 7) + 5 * 3 * 2) + 2 * 2
(6 * (4 + 2 * 6 + 9 * 2 * 4) + (8 * 5) * 6) * 6 * 6 * 2 + (8 + 4 * 7 * 3 * 2) + 6
(8 + 3) * 5 * 5 + 7 + (8 + 6 * 2 + (2 + 2 * 5) * 4 + 5) * 4
(7 + 2 + 8) + 3 * (8 * 6 + (7 * 4 * 4 * 9) + 4 + 4) * 5
(6 * 6 * 7) + 8 * 3 * 8
3 + 5 + ((4 * 3 * 7 * 4 * 9 + 7) + 6 * 7) * ((9 + 8 * 6 + 7 * 6 * 6) * 4 + 8) + 3 * 7
7 + ((3 * 3 * 8 * 6 + 9) + 2 + 6)
3 + 6 + 7 * (3 + 2 + (8 + 7 * 3 * 8 + 9 + 5)) * 8 * 3
(3 * 4 + 3 + 8 * 5) + 2 * 6 * 3 + (2 * 6 * 8 + 2 + 7)
4 * 3 * 8 + 2 * (2 + 9 + (7 + 8 + 6 + 2))
(4 * 9 * 8 * (8 * 5 + 9 + 3 * 3 * 6) * 4 + 6) + 7 * 2 * 6 * (4 + 2 + 8 * 6 * 9) * 4
(3 * (2 + 8 * 5 + 9 + 4) * 6 + (9 + 2 * 5 * 4) * 5 * 4) + 8 + 9 * 2
5 + (2 * 9 * 5 * 4 + 6) + 7 * 5
2 + (2 * (2 * 7 + 3 * 4 + 7 + 6)) + 3 * 8 + 4
(4 + (8 * 3 + 5 + 9 + 7 + 6) * (6 * 9) + 3) * 8 * ((7 * 9) + 7 * 5 + 2) * 8 * 4 + 6
7 * (6 + (3 + 5 + 3 * 9)) * 8
3 * (7 * (8 + 6) + 3) * 2
(7 * 3 * 5) * 9 + 3 * 7 + 9
9 + 7 + 3 + 9
7 * ((5 * 5 + 5) * (8 * 7 * 2) * 5 * (9 + 4)) * 5 * (3 + 8 + 7)
(5 + (5 + 9 * 5 * 6) * 8 * 6 * 3) * 7 * 6 * 7 + 4 + 8
7 + (3 + 7 + 3) * 5 + 3 * (2 + 8 + 7 * 2)
(8 + (9 * 7 * 8) * 8 + 7 * (9 * 8 + 8 * 4) + (5 + 4 + 9 * 6)) + 4 * ((9 + 4 * 8 * 3 * 9 + 9) * 6 + 6 * 8) * 3
6 * (4 * 3 + 5 * 8 * (2 * 5) + 9)
9 * 6 * 2 + (8 * 2 + 5 * 3 * 6 * 6) * 5 + (3 + 7 + 3 * 6)
(8 * 9 + 3 * 5 * (5 * 7)) + 5
(9 + 8) + 3 * 7 + 6 + ((9 + 9 * 3 + 4 * 4) + 4 + (3 * 2)) * 5
7 + (8 + 7) + 8 + (9 + 6 + 4 * 3 * 3) + (5 * 5 * 7 + 9 * 2)
4 + 7 * 6 * 5 * (6 + 6 * 7 + 5 + 9 + (8 * 5 * 7 + 9)) * (4 + 4)
(3 * 2 * 9) + ((4 + 2) + (5 + 9 * 8)) + 3 + 9
6 * 6 * 8 * 2 + (5 * 7 + (5 + 3 * 9) + 3 + 2 + 9)
(7 * (7 * 4) + 8 + 6) + 6 * 7 + 4
9 + 2 * 4 + 5 + 6
(3 * (5 + 8 * 4 + 7 * 5)) * 4 + 8 + 8 * 8 * 4
7 + 4 + 4 + (7 + 3 + 5 * 8 + (7 * 2 * 4 * 3 * 7 * 9) + 5) + (3 + 7) * (3 + 9 * 9 + 5)
4 * ((8 + 3 + 2 * 7 + 9) * 5) + (5 + 7 + (2 * 2 * 3 + 3 + 3 + 3) + 2 + 3 * (9 + 6 * 8 + 4)) * (6 * (3 + 3) * (2 * 7 * 8 + 8 * 4 + 3) * (3 + 2)) + 7 * 9
9 + 8 + 3 + 6 + ((8 * 8) * 9 * (9 * 8 * 5 + 3 + 5 * 9) * 9 + 3 + 5) * 2
(3 + 7 * 4 + 9 + 8 + (6 * 6 * 4)) * 9 * 5 + 6 * 8
(3 + 5 + 9) * 8 * 4 + ((6 + 6 + 3 + 5 + 7 + 3) * 9 + 3 * 6 * 6) + 7
(9 * 8 * 4) * 8 + (2 + (3 + 3) + 2 * (9 * 6 * 3 * 7) + 7 * 4)
((5 + 3 * 5 * 5) * 5) * (6 + 5 + 9 * 2 * 2 * 9) * 9 * (4 * 7 + 3 + 2 + 4) * 3
8 * (5 * 5 * 8 * (4 + 5 * 5 + 2 * 7)) * 9 + 3 * 8 * 9
5 * (9 * 9 + (3 * 6) + (6 + 2 * 9 + 6 + 4 * 8) + 7 * 6) + 9 * 7
4 * 4 + ((5 * 4 * 8 + 2) * (8 * 3) * 3 + (8 * 9 * 7 * 7 * 4) * 6) + 5
2 + 2 + 8 * 9
4 * (4 + 6) * 7
9 + 3 * 7
8 + 8 + 5 + 6 * 4
8 + 3
4 * (4 * (3 + 2) + 5 + 4 + 3 * 5) * ((4 + 3 + 7 + 4 + 5 * 2) * 9)
2 * 2 + 7 * 4 * ((4 * 9) * 7 * 2 + (6 + 7 * 9)) * 8
((7 * 3 * 3) * 8 + (3 + 3 * 8 + 8) + 5) * 9 + 2
((7 * 5 * 4 * 8) + (7 * 7 + 5) * 3 * 7 * 9 + 9) + 6 * 3
8 + 9 * 3 * 4 + 6
2 + 5 + 9 * 4 + (6 + 7 * 2 * (7 + 6 + 9 * 3 * 2) + 3) + 6
2 * 6 + 5 + ((6 * 3 + 7) + 3 + 2) + 6 + 9
(4 * 3 * 3) + (3 + (3 * 6 + 6 + 6 * 4 + 3) * 2 * (6 + 3 + 6 * 4 * 9) * 9) + 3
((7 + 6 + 3 * 9 * 3 + 8) + 5 * 3 * (4 + 4 + 5 + 5 * 9)) + 2 + 6
8 + (6 * 2 + 9) + 7 * 7
5 * (9 * 9 + (9 + 8 + 3 + 8 + 4 + 7) + 8 + 5 * 7) * 2 * 7 + 4 * (8 * 7 * 2)
(9 + 6 * 8 + 9 + 7 * 8) * 9 * 2 * 9 + 7
8 * (3 + 4 + 9 * 2 * 8) * 6
(3 + 6 + 9 * (3 * 7 * 8 * 7 * 5)) + 6 + (4 + 8 * 6) + 6
7 + 4 + 3 + (8 + (3 + 8 * 2) + (2 * 8 + 8 + 8)) * 9
(9 * 9 + (2 + 2 * 9 + 2 + 6)) * (7 * 7 + (8 + 9 + 6 * 2) + 9) + 2
4 + 6 + 7 + (9 * 2 + (9 * 5 * 2 + 5)) + (6 + 7 * (2 * 5) * 3 + 2)
9 * 9
8 + (8 * 4 + (5 + 4 + 7 * 7 * 4) + 2 * 9 + 4) * 6 + 4
6 * 4 + (2 * 9 + 5 * (3 + 8 * 5)) + (2 * 4 * 6 * 5 * (2 * 4 + 7 + 5 + 6 + 8)) * 8 * 2
(7 + 7) + 2 * (2 + 3 * 8) * 4
2 + ((5 * 9 + 4 + 8 * 5 * 5) * 6 + 3 * 3 + 8 * 2) + 6 * 2
(3 * 6 * (4 + 6)) * 5 * 4 + (2 + 3 * 7 * 7) * 9
4 + (3 + 5 + 2 + 8 * 6 + (2 * 6 + 5)) + (7 + 2 * 4 * 8) + 6 + 4
)";

struct Line {
  std::string text;
};

struct ParseResult {
  int64_t value{};
  size_t num_parsed{};
};

struct Add {};
struct Mul {};
struct Open {};
struct Close {};
struct Num {
  int64_t value{};
};

using Token = std::variant<Add, Mul, Open, Close, Num>;

std::vector<Token> tokenise(std::string_view line) {
  std::vector<Token> result;

  for (size_t pos = 0; pos < line.size(); ++pos) {
    switch (line[pos]) {
    case ' ':
      break;

    case '(':
      result.push_back(Open{});
      break;

    case ')':
      result.push_back(Close{});
      break;

    case '+':
      result.push_back(Add{});
      break;

    case '*':
      result.push_back(Mul{});
      break;

    default: {
      int64_t num{};
      auto const rc =
          std::from_chars(line.data() + pos, line.data() + line.size(), num);
      result.push_back(Num{num});
      pos = rc.ptr - line.data() - 1;
      break;
    }
    }
  }

  return result;
}

ParseResult parse_simple(std::span<Token const> line) {
  int64_t result{};
  std::function<void(int64_t)> accumulate = [&](auto in) { result += in; };

  for (size_t pos = 0; pos < line.size();) {
    if (!std::visit(aoc::Overloaded{
                        [&](Add) {
                          accumulate = [&](auto in) { result += in; };
                          pos += 1;
                          return true;
                        },
                        [&](Mul) {
                          accumulate = [&](auto in) { result *= in; };
                          pos += 1;
                          return true;
                        },
                        [&](Open) {
                          auto const inner = parse_simple(
                              {line.data() + pos + 1, line.size() - pos - 1});
                          accumulate(inner.value);
                          pos += inner.num_parsed + 1;
                          return true;
                        },
                        [&](Close) { return false; },
                        [&](Num n) {
                          accumulate(n.value);
                          pos += 1;
                          return true;
                        },
                    },
                    line[pos])) {
      return {result, pos + 1};
    }
  }

  return {result, line.size()};
}

std::vector<Token> reparenthise(std::span<Token const> tokens) {
  std::vector<Token> result;

  result.push_back(Open{});
  result.push_back(Open{});

  for (auto const &token : tokens) {
    std::visit(aoc::Overloaded{
                   [&](Add) {
                     result.push_back(Close{});
                     result.push_back(Add{});
                     result.push_back(Open{});
                   },
                   [&](Mul) {
                     result.push_back(Close{});
                     result.push_back(Close{});
                     result.push_back(Mul{});
                     result.push_back(Open{});
                     result.push_back(Open{});
                   },
                   [&](Open) {
                     result.push_back(Open{});
                     result.push_back(Open{});
                   },
                   [&](Close) {
                     result.push_back(Close{});
                     result.push_back(Close{});
                   },
                   [&](Num n) { result.push_back(n); },
               },
               token);
  }

  result.push_back(Close{});
  result.push_back(Close{});

  return result;
}

std::istream &operator>>(std::istream &is, Line &l) {
  return std::getline(is, l.text);
}
} // namespace

TEST_CASE("day18") {
  std::istringstream is{input};
  std::vector const lines(std::istream_iterator<Line>{is},
                          std::istream_iterator<Line>{});

  auto const a = std::accumulate(lines.cbegin(), lines.cend(), int64_t{},
                                 [](auto acc, auto const &line) {
                                   auto const tokens = tokenise(line.text);
                                   return acc + parse_simple(tokens).value;
                                 });

  auto const b = std::accumulate(
      lines.cbegin(), lines.cend(), int64_t{}, [](auto acc, auto const &line) {
        auto const tokens = tokenise(line.text);
        auto const reparenthised = reparenthise(tokens);
        return acc + parse_simple(reparenthised).value;
      });
}
